 stages: # the name of our stage, we can create several stages -> lint, pre-lint, deploy etc.
  - lint
  - build
  - deploy

  cach:                     # caching repeated info      
    key:
      files:
        - package-lock.json # use the name of this file like a key for caching info
      paths:
       - ./npm

.default-cache: &default-cache
before_script: 
    - npm ci --cache .npm --prefer-offline

eslint: # the name of our job
  extends: 
    .default-cache
  image: node:14.17.0-alpine # installing docker image with current version of node 
# this part of code has been taken from Chat GPT
   trigger:
    project: <project_path>
    branch: <branch>
    token: <token>
# this part of code has been taken from Chat GPT
  stage: lint # connect with our stage 
  script: #like steps in github. in gitlab we don't need to use checkout, because it already exists from the box
    - npm install
    - npm run lint


prettier: # the name of our job other
  extends: 
    .default-cache
  image: node:14.17.0-alpine # installing docker image with current version of node 
# this part of code has been taken from Chat GPT
   trigger:
    project: <project_path>
    branch: <branch>
    token: <token>
# this part of code has been taken from Chat GPT
  stage: lint # connect with our stage
  script: #like steps in github. in gitlab we don't need to use checkout, because it already exists from the box
    - npm install
    - npm run check:format # the name of script which run our prettier


# build job
build:
  extends: 
    .default-cache
  image:  node:14.17.0-alpine
  stage: build
  script:
    - npm install
    - npm run build
  artifacts:
    paths: 
      - build/ # указываем откуда брать данные и эти артефакты автоматически шарятся между всеми jobs & stages

# build job
  # Adding deploy stage settings
deploy:
  image:  node:14.17.0-alpine
# image: ubuntu:latest   -если используем линукс тогда такая команда
  stage: deploy
  script:
  # - apt -qq update && apt upgrade -qqy openssh-client  -если используем линукс, тогда такая команда, там уже предустановлен клиент
    - apk update && apk add openssh-client rsync # устанавливаем клиента
    - eval $(ssh-agent -s) # проверяем, запускаем и получаем переменную для нашего ssh агента 
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - # берем ключ, удаляем у него переводы строк и добавляем в наш агент чтобы он был доступен
    - mkdir -p ~/.ssh # создаем директорию
    - chmod 700 ~/.ssh # указываем безопасные права доступа
    # - scp ./build/*deploy@172.104.151.230:~/realworld      # scp - команда для копирования на удаленный сервер, в этой строке копируется весь проект, что в реальной жизни маловероятно. Нужно настраивать какие именно папки и файлы куда будут копироваться
     - rsync -a --progress --human-readable --delete
      --exclude-from '.gitignore'
      --exclude .gitignore
      --exclude .git 
     ./build/* deploy@172.104.151.230:~/realworld/public/


!!!!!!!! Build может падать если указаны переменные указаны как protected а ветка нет. Выбранную ветку тоже указывать как protected
Настройки:
Allowed to merge: Maintainers
Allowed to push: Developers + Maintainers
После этого перезапустить Pipline
